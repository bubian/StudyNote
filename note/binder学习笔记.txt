IPC（进程间通信）：Binder

1：
传统的管道（Pipe）、信号（Signal）和跟踪（Trace），这三项通信手段只能用于父进程与子进程之间，或者兄弟进程之间；后来又增加了命令管道（Named Pipe），使得进程间通信不再局限于父子进程或者兄弟进程之间，为了更好地支持商业应用中的事务处理，在AT&T的Unix系统V中，又增加了三种称为“System V IPC”的进程间通信机制，分别是报文队列（Message）、共享内存（Share Memory）和信号量（Semaphore）；后来BSD Unix对“System V IPC”机制进行了重要的扩充，提供了一种称为插口（Socket）的进程间通信机制

2：
在Android系统的Binder机制中，由一系统组件组成，分别是Client、Server、Service Manager和Binder驱动程序，其中Client、Server和Service Manager运行在用户空间，Binder驱动程序运行内核空间。Binder就是一种把这四个组件粘合在一起的粘结剂了，其中，核心组件便是Binder驱动程序了，Service Manager提供了辅助管理的功能，Client和Server正是在Binder驱动和Service Manager提供的基础设施上，进行Client-Server之间的通信。

3 mmap()函数：
mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享

4 ioctl()函数：
ioctl是设备驱动程序中对设备的I/O通道进行管理的函数。所谓对I/O通道进行管理，就是对设备的一些特性进行控制，例如串口的传输波特率、马达的转速等等

5 线程是CPU调度的最小单元，进程是一个执行单元。

6 Android可以通过Biinder和Socket实现任意两个终端间的通信。

7 Android中常规创建多进程方式只有通过android:process属性，非常规可以通过JNI在native层去fork一个新的进程。

8 进程名以“:”开头的进程属于当前应用的私有进程，其它应用的组件不可以和它运行在同一个进程里面，而不以“:”开头的进程属于全局进程，其它应用可以通过shareUid方式可以和它运行在同一个进程中。

9 Android系统会为每一个应用分配一个唯一的UID(用户id)，具有相同的UID的应用才能共享数据，两个应用通过ShareUID跑在同一个进程中的要求是：两个应用的ShareUID和签名相同才可以，
在这种情况下，它们可以互相访问对方的私有数据，比如data目录，组件信息等，不管它们是否跑在同一个进程中，如果跑在同一进程中，还可以访问共享内存数据。


10 Android会为每一个进程分配一个独立的虚拟机，不同的虚拟机在内存的分配上有不同的地址空间，这就导致在不同的虚拟机访问同一个类的对象会产生多份副本。

11 
