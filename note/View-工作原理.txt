1.初识ViewRoot和DecorView

	ViewRoot:id为content的FrameLayout
	
		(1) View对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程是用过ViewRoot来完成的。在ActivityThread中，当Activity对象创建完成后，会将DecorView添加到Window中，
					 同时会创建ViewRootImpl对象，并将ViewRootIpml和DecorView建立关联。
		(2) View的绘制流程从ViewRoot的performTraversals方法开始的，它经measure，layout，draw三个过程才能最终将一个View绘制出来，其中measure用于测量View的宽和高，layout用于确定View在父容器
				中的放置位置，而draw则负责将View绘制在屏幕上。
				
																				performTraversals ---> measure ---> layout--> draw
				
																									performTraversals
														 ViewGroup										|																View
														-|---------------------------------------------------|-		-|----------------|-
														 |																									 |		 |								|
														 |		performMeasure ----> measure ----> onMeasure --------------> measure	|
														 |														 											 |     |								|
														 |														  									   |		 |								|
														 |		performLayout  ----> layout  ----> onLayout  --------------> layout		|
														 |														  										 |		 |								|
														 |														  									   |		 |								|
														 |		performDraw    ---->  draw   ----> onDraw    --------------> draw			|
														 |														  	                   |		 |								|
														-|---------------------------------------------------|-   -|----------------|-
	
2.理解MeasureSpec：

	MeasureSpec代表一个32位int值，高2位代表SpecMode(测量模式)，低30位代表SpecSize(某种测量模式下的规格大小)。
	
	(1) MeasureSpec有三类：
			1.UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态。
			2.EXACTLY:父容器已经检测出View所需的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式。
			3.AT_MOST：父容器指定了一个可用的大小，即SpecSize，View的大小不能大于这个值，具体是什么值要看不同的View的具体实现。它对应于LayoutParams中的wrap_content。
		
	(2) DecorView的MeasureSpec的创建过程：
			对于DecorView来说，在ViewRootImpl中的measureHierarchy方法中展示了DecorView的MeasureSpec创建过程。
			    private boolean measureHierarchy(final View host, final WindowManager.LayoutParams lp,final Resources res, final int desiredWindowWidth, final int desiredWindowHeight) {
			    	
			    	......
			    	
			    	if (!goodMeasure) {
	            childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width); //desiredWindowWidth屏幕的宽
	            childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height); //desiredWindowHeight屏幕的高
	            performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);
	            if (mWidth != host.getMeasuredWidth() || mHeight != host.getMeasuredHeight()) {
	                windowSizeMayChange = true;
	            }
        		}
			    }
			    
			    getRootMeasureSpec函数:
			    
						private static int getRootMeasureSpec(int windowSize, int rootDimension) {
				        int measureSpec;
				        switch (rootDimension) {

				        case ViewGroup.LayoutParams.MATCH_PARENT:
				            // Window can't resize. Force root view to be windowSize.
				            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);
				            break;
				        case ViewGroup.LayoutParams.WRAP_CONTENT:
				            // Window can resize. Set max size for root view.
				            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);
				            break;
				        default:
				            // Window wants to be an exact size. Force root view to be that size.
				            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);
				            break;
				        }
				        return measureSpec;
				    }
				    
	(3) 对于普通的View来说，这里值我们布局中的View，View的measure过程由ViewGroup传递而来。
			
			protected void measureChildWithMargins(View child,int parentWidthMeasureSpec, int widthUsed,int parentHeightMeasureSpec, int heightUsed) {
        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();

        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,
                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin
                        + widthUsed, lp.width);
        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,
                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin
                        + heightUsed, lp.height);

        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      }
      
      从源码可以看出，子元素的MeasureSpec的创建与父容器的MeasureSpec和子元素自身的LayoutParams有关，此外还和View的margin及padding有关。
      
       public static int getChildMeasureSpec(int spec, int padding, int childDimension) {
       	
       	......
       	
       	switch (specMode){
	        // Parent has imposed an exact size on us
	        case MeasureSpec.EXACTLY:
	            
	           	......
	           	
	            break;

	        // Parent has imposed a maximum size on us
	        case MeasureSpec.AT_MOST:
	            
	            ......
	            
	            break;

		        // Parent asked to see how big we want to be
		        case MeasureSpec.UNSPECIFIED:

		            ......
		            
		            break;
        }
       }
       由上面方法得出的普通View的MeasureSpec的创建规则：
       												|
															|	       
											  --------------------------------------parentSpecMode----------------------------->
											  			|
											  			|
															|
															|		 						           |  EXACTLY   |  AT_MOST   |  UNSPECIFIED
															|		                       |            |						 |
															|	           --------------|------------|------------|--------------
															|		          dp/px        |  EXACTLY   |  EXACTLY   |  EXACTLY
												chlidLayoutParams	   			       | childSize  | childSize  | childSize
															|            --------------|------------|------------|--------------	 
															|		          match_parent |  EXACTLY   |  AT_MOST   | UNSPECIFIED
															|		       			           | parentSize | parentSize |     0
															|	           --------------|------------|------------|--------------
															|		          wrap_conent  |  AT_MOST   |  AT_MOST   | UNSPECIFIED
															|		       		          	 | parentSize | parentSize |     0
															|				       	
       
       总结：
       		1. View采用固定宽/高的时候，不够父容器的MeasureSpec是什么，View的MeasureSpec都是精确模式并且其大小遵循LayoutParams中的大小。
       		2. View的宽/高手是match_parent时，如果父容器是精确模式，那么View也是精确模式并且大小就是父容器的剩余空间。
       		3. View的宽/高手是wrap_content时，不管父容器的模式是精确还是最大化，View的模式总是最大化，并且不能超过父容器的剩余空间。
       		4. UNSPECIFIED主要用于系统内部多次Measure的情形，一般我们不需要关注。
       	
3.View的工作流程:

	(1) View ：measure过程:
			View的measure过程由其measure方法完成，measure方法是一个final类型的方法，在measure方法中会调用onMeasure方法。
			
			--------------------------View.java-----------------------------
			
			protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
				//getSuggestedMinimumWidth和getSuggestedMinimumHeight都是在UNSPECIFIED情况下的测量宽/高
        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));
      }
      
      //private Drawable mBackground;
      protected int getSuggestedMinimumWidth() {
      	/**
      		如果View没有设置背景，那么View的宽高等于mMinWidth，而mMinWidth对应于android:minWidth这个属性指定的值，如果这个属性不指定，那么mMinWidth默认等于0；如果指定了背景，则View的宽高为
      		max(mMinWidth, mBackground.getMinimumWidth()。
      	*/
        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());
    	}
    	
    	/**
    		getMinimumWidth返回的是Drawable的原始宽度，前提是这个Drawable由原始宽度，否则为0，那么Drawable在什么情况下有原始宽度？
    		比如说ShapeDrawable无原始宽/高，而BitmapDrawable有原始宽/高(图片尺寸)
    	*/
    	public int getMinimumWidth() {
        final int intrinsicWidth = getIntrinsicWidth();
        return intrinsicWidth > 0 ? intrinsicWidth : 0;
      }
      
      /**
      	specSize是View测量后的大小，这里多次提到测量后的大小，是因为View最终的大小是在layout阶段确定的，所有需要加以区分，但几乎所有情况下的View的测量大小和最终大小是相等的。
      	
      	View的宽/高由specSize决定，所以，直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中就使用wrap_content就相当于使用match_parent
      	。如果View在布局中使用wrap_content，那么specMode是AT_MOST模式，这种模式下，View的specSize是parentSize(父容器当前的剩余空间)
      */
      public static int getDefaultSize(int size, int measureSpec) {
        int result = size;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        switch (specMode) {
        case MeasureSpec.UNSPECIFIED:
            result = size;
            break;
        case MeasureSpec.AT_MOST:
        case MeasureSpec.EXACTLY:
            result = specSize;
            break;
        }
        return result;
    	}
    	
	(2) ViewGroup : measure过程:
      对于ViewGroup来说，除了完成自己的measure过程外，还会遍历去调用所有子View的measure方法，各个子元素再递归去执行这个过程。ViewGroup是一个抽象类，因此没有重写View的onMeasure方法
      ，但提供了一个measureChildren的方法。
      
      ---------------------------ViewGroup.java---------------------------
      
	      protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) {
	        final int size = mChildrenCount;
	        final View[] children = mChildren;
	        for (int i = 0; i < size; ++i) {
	            final View child = children[i];
	            if ((child.mViewFlags & VISIBILITY_MASK) != GONE) {
	                measureChild(child, widthMeasureSpec, heightMeasureSpec);
	            }
	        }
	      }
	      
		    protected void measureChild(View child, int parentWidthMeasureSpec,int parentHeightMeasureSpec) {
	        final LayoutParams lp = child.getLayoutParams();
	        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,
	                mPaddingLeft + mPaddingRight, lp.width);
	        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,
	                mPaddingTop + mPaddingBottom, lp.height);
	        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
	     }
	     
	     ViewGroup没有定义其测量的具体过程，这是因为ViewGroup是个抽象类，其测量过程的onMeasure方法需要各个子类去具体实现，比如LinearLayout等，各个子类的测量实现细节不一样
	     ，ViewGroup无法做到统一实现。
	     
	     ------------------------LinearLayout.java---------------------------
	     
	     onMeasure：
	     
			  @Override
		    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
	        if (mOrientation == VERTICAL) {
	            measureVertical(widthMeasureSpec, heightMeasureSpec);
	        } else {
	            measureHorizontal(widthMeasureSpec, heightMeasureSpec);
	        }
		    }
		    
		    measureVertical:
		    
        void measureVertical(int widthMeasureSpec, int heightMeasureSpec) {
        	
        	......
        	
          // See how tall everyone is. Also remember max width.
          for (int i = 0; i < count; ++i) {
          	
          	final View child = getVirtualChildAt(i);

          	......
          	
      	    // Determine how big this child would like to be. If this or
            // previous children have given a weight, then we allow it to
            // use all available space (and we will shrink things later
            // if needed).
            
           	/**
		    			遍历子元素并对每个子元素执行measureChildBeforeLayout方法，这个方法内部会调用子元素的measure方法，这样各个子元素就依次进入measure过程。
		    		*/
		    
            measureChildBeforeLayout(
                   child, i, widthMeasureSpec, 0, heightMeasureSpec,
                   totalWeight == 0 ? mTotalLength : 0);

            if (oldHeight != Integer.MIN_VALUE) {
               lp.height = oldHeight;
            }

            final int childHeight = child.getMeasuredHeight();
            final int totalLength = mTotalLength; // totalLength存储LinearLayout竖直方向的初步高度。没测量一个子元素，就会增加，增加部分主要包括子元素的高度和子元素在竖直方向上的margin。
            mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin +
                   lp.bottomMargin + getNextLocationOffset(child));
          }
          
          ......
          
          // Add in our padding
          
          /**
          	LinearLayout开始测量自己的大小
          	
          	LinearLayout会根据子元素的情况来测量自己的大小。针对竖直的LinearLayout而言，它的水平方向的测量遵循View的测量过程，在竖直方向的测量过程和View有所不同，
          	具体是指，如果它的布局高度采用的是match_parent或者具体高度，那么它的测量过程和View一致，即高度为specSize；如果它的布局采用了wrap_content，那么它的最终
          	高度是所有子元素所占用的高度总和，但仍然不能超过它的父容器的剩余空间大小，当然它的最终高度还需要考虑其在竖直方向的padding，请参照resolveSizeAndState实现。
          */
	        mTotalLength += mPaddingTop + mPaddingBottom;

	        int heightSize = mTotalLength;

	        // Check against our minimum height
	        heightSize = Math.max(heightSize, getSuggestedMinimumHeight());
	        
	        // Reconcile our calculated size with the heightMeasureSpec
	        int heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, 0);
	        heightSize = heightSizeAndState & MEASURED_SIZE_MASK;
        }
        
        -------------------------View------------------------------
        
        resolveSizeAndState：
        
		     public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {
		        int result = size;
		        int specMode = MeasureSpec.getMode(measureSpec);
		        int specSize =  MeasureSpec.getSize(measureSpec);
		        switch (specMode) {
		        case MeasureSpec.UNSPECIFIED:
		            result = size;
		            break;
		        case MeasureSpec.AT_MOST:
		            if (specSize < size) {
		                result = specSize | MEASURED_STATE_TOO_SMALL;
		            } else {
		                result = size;
		            }
		            break;
		        case MeasureSpec.EXACTLY:
		            result = specSize;
		            break;
		        }
		        return result | (childMeasuredState&MEASURED_STATE_MASK);
		     }
	View的measure过程是三大流程中最复杂的一个，measure完成后，可以通过getMeasuredWidth/Height方法获取到View的测量宽/高。但是在某些极端的情况下，系统可能会多次measure才能确定最终的测量宽/高
	，在这种情况下，在onMeasure方法拿到的宽/高可能不准确。一个好的习惯是在onLayout方法中获取。
	
	思考：在Activity的onCreate，onStart，onResume中一定能够获取到正确的View的宽/高吗？
	答案：不一定，View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate，onStart，onResume时某个View已经测量完毕了。解决办法如下：
	
			(1) 在Activity里重写onWindowFocusChanged方法，然后在onWindowFocusChanged获取宽/高，onWindowFocusChanged这个方法的含义就是:View已经初始化完毕了，宽高已经准备好了，
				当Activity的窗口得到焦点和失去焦点时均会被调用一次。具体说：当Activity继续执行和暂停执行时，onWindowFocusChanged均会被调用，如果频繁地进行onResume和onPause，
				那么onWindowFocusChanged也会被频繁地调用。
			(2) view.post(runnable):通过post可以将一个runnable投递到消息队列的尾部，然后等待Looper调用此runnable的时候，View也已经初始化好了。
			(3) ViewThreeObserver：使用ViewThreeObserver的众多回调可以解决，比如使用OnGlobalLayoutListener这个接口，当View树的状态发生改变或者View树内部的View的可见性发生改变时，
			  onGlobalLayout方法将被回调，因此这是获取View宽/高一个很好的时机。需要注意的是，伴随着View树的状态的改变等，onGlobalLayout会被调用多次。
			      @Override
					  protected void onStart() {
					      super.onStart();
					      ViewTreeObserver observer = mButton1.getViewTreeObserver();
					      observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
					          @Override
					          public void onGlobalLayout() {
					              ......
					          }
					      });
					  }
		  (4) view.measure(int widthMeasureSpec, int heightMeasureSpec)：通过手动对View进行measure来获取View的宽/高。这种方法比较复杂，需要分情况处理，根据View的LayoutParams来区分：
		  
		  		match_parent
		  		
		  		直接放弃，无法measure出具体的宽/高。根据View的measure过程，构造此种MeasureSpec需要知道parentSize，即父容器的剩余空间，而这个时候我们无法知道parentSize大小，理论上不能。
		  		
		  		wrap_content
		  		
		  		可以通过最大法去构造MeasureSpec是合理的
		  		
	网上对View的Measure错误用法：
		第一种：
		    int widthMeasureSpec = MeasureSpec.makeMeasureSpec(-1,MeasureSpec.UNSPECIFIED);
        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(-1,MeasureSpec.UNSPECIFIED);
        view.measure(widthMeasureSpec,heightMeasureSpec);
    第二种：
    	  view.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
			
	(3) ViewGroup ： layout过程：
	
			layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置确定后，它在onLayout中会遍历所有的子元素并调用其layout方法，在layout方法里又会调用onLayout方法。
			layout方法确定View本身的位置，而onLayout方法这会确定所有子元素的位置。
			
			----------------------------View.java--------------------------------
			
		  setFrame方法设定View的四个顶点的位置 ---> 调用onLayout来确定子元素的位置
				    
			@SuppressWarnings({"unchecked"})
	    public void layout(int l, int t, int r, int b) {
	    	if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {
            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);
            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
        }

        int oldL = mLeft;
        int oldT = mTop;
        int oldB = mBottom;
        int oldR = mRight;

        boolean changed = isLayoutModeOptical(mParent) ?
                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);

        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {
            onLayout(changed, l, t, r, b);
            mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;

            ListenerInfo li = mListenerInfo;
            if (li != null && li.mOnLayoutChangeListeners != null) {
                ArrayList<OnLayoutChangeListener> listenersCopy =
                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();
                int numListeners = listenersCopy.size();
                for (int i = 0; i < numListeners; ++i) {
                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);
                }
            }
        }

        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;
        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;
	    }
	    
			onLayout和onMeasure方法类似，View和ViewGroup都没有实现该方法。
			
			LinearLayout : onLayout
			
			@Override
	    protected void onLayout(boolean changed, int l, int t, int r, int b) {
	        if (mOrientation == VERTICAL) {
	            layoutVertical(l, t, r, b);
	        } else {
	            layoutHorizontal(l, t, r, b);
	        }
	    }
	    
	    void layoutVertical(int left, int top, int right, int bottom) {
	    	
	    	......
	    	
	    	final int count = getVirtualChildCount();
	    	
	    	......
	    	
	      for (int i = 0; i < count; i++) {
            final View child = getVirtualChildAt(i);
            if (child == null) {
                childTop += measureNullChild(i);
            } else if (child.getVisibility() != GONE) {
                final int childWidth = child.getMeasuredWidth();
                final int childHeight = child.getMeasuredHeight();
                
                final LinearLayout.LayoutParams lp =
                        (LinearLayout.LayoutParams) child.getLayoutParams();
                
                int gravity = lp.gravity;
                if (gravity < 0) {
                    gravity = minorGravity;
                }
                final int layoutDirection = getLayoutDirection();
                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);
                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
                    case Gravity.CENTER_HORIZONTAL:
                        childLeft = paddingLeft + ((childSpace - childWidth) / 2)
                                + lp.leftMargin - lp.rightMargin;
                        break;

                    case Gravity.RIGHT:
                        childLeft = childRight - childWidth - lp.rightMargin;
                        break;

                    case Gravity.LEFT:
                    default:
                        childLeft = paddingLeft + lp.leftMargin;
                        break;
                }

                if (hasDividerBeforeChildAt(i)) {
                    childTop += mDividerHeight;
                }

                childTop += lp.topMargin;
                setChildFrame(child, childLeft, childTop + getLocationOffset(child),
                        childWidth, childHeight);
                childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);

                i += getChildrenSkipCount(child, i);
            }
       }
     }
     
     setChildFrame:
     
     /**
     	 final int childWidth = child.getMeasuredWidth();
       final int childHeight = child.getMeasuredHeight();
       View的测量宽/高，layout会通过setFrame去设置子元素的四个顶点位置。
     */
	    private void setChildFrame(View child, int left, int top, int width, int height) {        
	        child.layout(left, top, left + width, top + height);
	    }
	    
	思考：为什么View的测量宽高和最终宽高不一定相等？
	答案：View的测量宽高形成于View的measure过程，最终宽高形成于View的layout过程，即两者的赋值时机不同，测量宽高的时机稍微早一点，因此，日常开发中，我们可以认为View的测量
				宽高等于最终宽高，当也存在某些特殊情况，比如：
				
    		public void layout(int l, int t, int r, int b) {
    			super.layout(int l, int t, int r+100, int b+100) {
    		}
    		最终宽高比测量宽高大100px
    		
	(4) ViewGroup ：draw过程
    		
    	作用：将View绘制到屏幕上面。
    	
    	View的绘制过程遵循如下几步：
    		1.绘制背景(background.draw(canvas))
    		2.绘制自己(onDraw)
    		3.绘制children(dispatchDraw)
    		4.绘制装饰(onDrawScrollBars)
	
        ----------------------------------------View.java--------------------------------
        
           public void draw(Canvas canvas) {
			        final int privateFlags = mPrivateFlags;
			        final boolean dirtyOpaque = (privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &&
			                (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);
			        mPrivateFlags = (privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;

			        /*
			         * Draw traversal performs several drawing steps which must be executed
			         * in the appropriate order:
			         *
			         *      1. Draw the background
			         *      2. If necessary, save the canvas' layers to prepare for fading
			         *      3. Draw view's content
			         *      4. Draw children
			         *      5. If necessary, draw the fading edges and restore layers
			         *      6. Draw decorations (scrollbars for instance)
			         */

			        // Step 1, draw the background, if needed
			        int saveCount;

			        if (!dirtyOpaque) {
			            drawBackground(canvas);
			        }

			        // skip step 2 & 5 if possible (common case)
			        final int viewFlags = mViewFlags;
			        boolean horizontalEdges = (viewFlags & FADING_EDGE_HORIZONTAL) != 0;
			        boolean verticalEdges = (viewFlags & FADING_EDGE_VERTICAL) != 0;
			        if (!verticalEdges && !horizontalEdges) {
			            // Step 3, draw the content
			            if (!dirtyOpaque) onDraw(canvas);

			            // Step 4, draw the children
			            dispatchDraw(canvas);

			            // Step 6, draw decorations (scrollbars)
			            onDrawScrollBars(canvas);

			            if (mOverlay != null && !mOverlay.isEmpty()) {
			                mOverlay.getOverlayView().dispatchDraw(canvas);
			            }

			            // we're done...
			            return;
			            
			        }
			        
			        ......
			        
          	}
          	
          	View比较特殊的一个方法：setWillNotDraw：
          	
          	/**
          		如果一个View不需要绘制任何东西，那么可以将这个标志位设置为true，系统会进行相应的优化。默认情况下，View没有启用这个优化标志位，但是ViewGroup会默认启用这个标志位。
          	*/
          	
          	/**
				     * If this view doesn't do any drawing on its own, set this flag to
				     * allow further optimizations. By default, this flag is not set on
				     * View, but could be set on some View subclasses such as ViewGroup.
				     *
				     * Typically, if you override {@link #onDraw(android.graphics.Canvas)}
				     * you should clear this flag.
				     *
				     * @param willNotDraw whether or not this View draw on its own
				     */
				    public void setWillNotDraw(boolean willNotDraw) {
				        setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK);
				    }
				   
          	
