1 TouchSlop:
	系统认为滑动的最小距离，两次滑动之间的距离小于这个值，系统将不会认为进行了滑动，该值和设置有关。
	获取方法:ViewConfiguration.get(getContext()).getScaledTouchSlop();
	这个常量定义位置:framework/base/core/res/res/values/config.xml。
	
View点击事件得分发：
	Activity――>Decor View(底层容器，即setContentView所设置得View的父容器)――>然后到子容器。

2 点击事件由下面三个比较重要的方法完成:
	
	public boolean dispatchTouchEvent(MotionEvent ev)
		用于进行事件分发。如果事件能够传递给当前View，此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法影响，表示是否消耗当前事件。
		
	public boolean onInterceptTouchEvent(MotionEvent ev)
		内部调用，判断是否要拦截某个事件，如果当前View拦截了这个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果为是否拦截当前事件。
		
	public boolean onTouchEvent(MotionEvent ev)
		在dispatchTouchEvent方法中调用，用于出来点击事件，返回结果表示是否消耗昂当前事件，如果不消耗，同一事件序列中，当前View无法再次接受事件。
		
	三者的关系可以用下面伪代码来展示：
	
		public  boolean dispatchTouchEvent(MotionEvent ev){
			boolean consume = false;
			if(onInterceptTouchEvent(ev)){
				consume = onTouchEvent(ev);
			}else{
				consume = child.dispatchTouchEvent(ev);
			}
			return consume;
		}
	
	当一个点击事件产生后，它的传递过程遵循如下顺序:
		Activity -> Window -> View，即事件总是先传递给Activity，Activity再传递给Window，最后Window再传递给顶级View，顶级View接受到事件后，就按照事件分发机制去分发事件。
		
	结论：
		1.同一事件序列指从手指触摸屏幕的那个刻起，到手指离开屏幕那一刻结束，再这个过程产生的一系列事件，这个事件序列以down事件开始，中间包含数量不定的move事件，最终以up事件结束。
		2.正常情况下，一个事件序列只能被一个View拦截消耗。
		3.某个View一旦开始处理事件，如果它不消耗，那么同一事件序列中的其它事件都不会再交给它处理，并且事件将重新交由父元素处理。
		4.如果View不消耗除ACTION_DOWN以外的其它事件，那么这个点击事件会消失，此时父元素的onTouchEvent不会回掉，并且当前View可以继续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。
		6.ViewGroup默认不拦截任何事件。Android源码里的ViewGroup的onInterceptTouchEvent默认返回false。
		7.View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被回调。
		8.View的onTouchEvent默认都会消耗事件(返回true)，除非是不可以点击的(clickable和longClickable同时为false)。View的longClickable属性默认都为false，clickable属性要分情况，比如Button默认是true，TextView是false。
		9.View的enabel属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态，只有clickable和longClickable有一个是true，那么onTouchEvent都返回true。
		10.onClick会发生的条件是当前View可被点击，并且收到了down和up事件。
		11.事件传递过程是由外向内，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。
	
3.源码分析事件分发：

	1.Avtivity : dispatchTouchEvent
	
    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            onUserInteraction();
        }
        if (getWindow().superDispatchTouchEvent(ev)) {
            return true;
        }
        return onTouchEvent(ev);
    }
    
  Window的唯一实现类是:PhoneWindow，可以去看Window类的注释。
  
  2.PhonWindow ： superDispatchTouchEvent
  
 		    @Override
    public boolean superDispatchTouchEvent(MotionEvent event) {
        return mDecor.superDispatchTouchEvent(event);
    }
  
  mDecor : 顶级View，在Activity中通过setContentView所设置的View，顶级View也叫根View，顶级View一般说来都是ViewGroup。
  
 3.ViewGroup : dispatchTouchEvent
 
     @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
    	......
    	
    	/**
    		down事件来时做一些清理操作，比如重置FLAG_DISALLOW_INTERCEPT标志位。
    	*/
      // Handle an initial down.
      if (actionMasked == MotionEvent.ACTION_DOWN) {
          // Throw away all previous state when starting a new touch gesture.
          // The framework may have dropped the up or cancel event for the previous gesture
          // due to an app switch, ANR, or some other state change.
          cancelAndClearTouchTargets(ev);
          resetTouchState();
      }
    	
    	/**
		  		mFirstTouchTarget != null，当事件由ViewGroup的子元素成功处理时，mFirstTouchTarget会被赋值并指向子元素，即，当ViewGroup不拦截事件并将事件交由子元素处理时，
		  		mFirstTouchTarget != null。反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget != null就不成立。最终到达的效果就是，一旦ViewGrop拦截了事件，那么
		  		同一序列的其它事件都将交由ViewGrop处理，不再调用onInterceptTouchEvent方法。
		  		
		  		FLAG_DISALLOW_INTERCEPT : 通过requestDisallowInterceptTouchEvent方法设置，一般用于子View中。一旦设置后，ViewGroup将无法拦截除ACTION_DOWN以后的其它事件。ACTION_DOWN事件时会重置
		  		FLAG_DISALLOW_INTERCEPT标志位，导致子View 设置的这个标志位失效。当面对ACTION_DOWN事件时，ViewGroup总会调用自己的onInterceptTouchEvent方法。
		  		FLAG_DISALLOW_INTERCEPT 表示ViewGroup不再拦截事件，前提是ViewGroup不拦截ACTION_DOWN事件。
		  */
		  // Check for interception.
		  final boolean intercepted;
		  if (actionMasked == MotionEvent.ACTION_DOWN
		          || mFirstTouchTarget != null) {
		      final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;
		      if (!disallowIntercept) {
		          intercepted = onInterceptTouchEvent(ev);
		          ev.setAction(action); // restore action in case it was changed
		      } else {
		          intercepted = false;
		      }
		  } else {
		      // There are no touch targets and this action is not an initial down
		      // so this view group continues to intercept touches.
		      intercepted = true;
		  }
		  
		  ......
		  
	    final View[] children = mChildren;
	    for (int i = childrenCount - 1; i >= 0; i--) {
	        final int childIndex = customOrder
	                ? getChildDrawingOrder(childrenCount, i) : i;
	        final View child = (preorderedList == null)
	                ? children[childIndex] : preorderedList.get(childIndex);
	        if (!canViewReceivePointerEvents(child)
	                || !isTransformedTouchPointInView(x, y, child, null)) {
	            continue;
	        }

	        newTouchTarget = getTouchTarget(child);
	        if (newTouchTarget != null) {
	            // Child is already receiving touch within its bounds.
	            // Give it the new pointer in addition to the ones it is handling.
	            newTouchTarget.pointerIdBits |= idBitsToAssign;
	            break;
	        }

	        resetCancelNextUpFlag(child);
	        /**
	        	dispatchTransformedTouchEvent :  向子元素分发事件
	        */
	        if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {
	            // Child wants to receive touch within its bounds.
	            mLastTouchDownTime = ev.getDownTime();
	            if (preorderedList != null) {
	                // childIndex points into presorted list, find original index
	                for (int j = 0; j < childrenCount; j++) {
	                    if (children[childIndex] == mChildren[j]) {
	                        mLastTouchDownIndex = j;
	                        break;
	                    }
	                }
	            } else {
	                mLastTouchDownIndex = childIndex;
	            }
	            mLastTouchDownX = ev.getX();
	            mLastTouchDownY = ev.getY();
	            /**
	            	addTouchTarget方法 : 
							      private TouchTarget addTouchTarget(View child, int pointerIdBits) {
											TouchTarget target = TouchTarget.obtain(child, pointerIdBits);
											target.next = mFirstTouchTarget;这里对mFirstTouchTarget赋值
							        mFirstTouchTarget = target;
							        return target;
									 }
									 
									 mFirstTouchTarget : 是一个单链表结构，mFirstTouchTarget是否被赋值，直接影响到ViewGroup对事件的拦截策略，如果
									 mFirstTouchTarget == null，那么ViewGroup就默认拦截接下来同一序列中的所有的点击事件。
	            */
	            newTouchTarget = addTouchTarget(child, idBitsToAssign);
	            alreadyDispatchedToNewTouchTarget = true;
	            break;
	        }
	    }

    }
    
	4.View : dispatchTouchEvent
		    public boolean dispatchTouchEvent(MotionEvent event) {
		    	
		    	......
		    	
		   		if (onFilterTouchEventForSecurity(event)) {
            //noinspection SimplifiableIfStatement
            ListenerInfo li = mListenerInfo;
            if (li != null && li.mOnTouchListener != null
                    && (mViewFlags & ENABLED_MASK) == ENABLED
                    && li.mOnTouchListener.onTouch(this, event)) {
                result = true;
            }
            
            /**
            	显然，如果View设置了OnTouchListener监听，那么mOnTouchListener就不为null，如果onTouch返回true，那么onTouchEvent将不会被调用，可见OnTouchListener优先级高于onTouchEvent。
            */

            if (!result && onTouchEvent(event)) {
                result = true;
            }
        	}
		    }
		    
		    	:	onTouchEvent
		    	
		    	public boolean onTouchEvent(MotionEvent event) {
		    		
			      ......

						//显然A disabled view也会消耗onTouchEvent事件，只是回应这些事件。
			      if ((viewFlags & ENABLED_MASK) == DISABLED) {
			          if (event.getAction() == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {
			              setPressed(false);
			          }
			          // A disabled view that is clickable still consumes the touch
			          // events, it just doesn't respond to them.
			          return (((viewFlags & CLICKABLE) == CLICKABLE ||
			                  (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE));
			      }
			      
						//如果设置了代码，还会执行代理的onTouchEvent方法
			      if (mTouchDelegate != null) {
		          if (mTouchDelegate.onTouchEvent(event)) {
		              return true;
		          }
        		}
        		
        		/**
        			这部分代码请自行查看源码，从源码看，只要CLICKABLE和LONG_CLICKABLE其中一个是true，便消耗事件，并且在ACTION_UP事件发生时，会触发performClick方法，
        			如果View设置了onClickListener，那么在performClick方法里会调用onClick方法。
        			
        			View的LONG_CLICKABLE默认是false，可以通过setClickable和setLongClickable分别改变View的CLICKABLE和LONG_CLICKABLE属性。另外，setOnClickListener和setOnLongClickListene方法会自动
        			，分别把View的CLICKABLE和LONG_CLICKABLE设置为true。
        		  public void setOnLongClickListener(OnLongClickListener l) {
        				if (!isLongClickable()) {
            			setLongClickable(true);
        				}
        				getListenerInfo().mOnLongClickListener = l;
    					}
        			public void setLongClickable(boolean longClickable) {
        				setFlags(longClickable ? LONG_CLICKABLE : 0, LONG_CLICKABLE);
    					}
        			
        		*/
        		if (((viewFlags & CLICKABLE) == CLICKABLE ||(viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {
        			
        			......
        			
            }
			    }
			    
	5.onTouchEvent vs dispatchKeyEvent:
		dispatchKeyEvent的分发流程和onTouchEvent差不多，都是	Activity -> Window -> View，即事件总是先传递给Activity，Activity再传递给Window，
		最后Window再传递给顶级View，顶级View接受到事件后，就按照事件分发机制去分发事件。里面的很多处理原则和onTouchEvent差不多，源码比onTouchEvent
		简单很多，请自行查看源码。
	
	6.View的滑动事件冲突:
	
		
		